# Copyright (c) Michael M. Magruder (https://github.com/mikemag)
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

import glob
import json
import os
from collections import OrderedDict

from sortedcontainers import SortedDict


def load_json(filename, results):
    with open(os.path.join(filename), 'r') as f:
        r = json.load(f)
        runs = [x['run'] for x in r if 'run' in x]

        for run in runs:
            ar = results.setdefault(run['Strategy'], SortedDict())
            pr = ar.setdefault(int(run['Pin Count']), SortedDict())
            gr = pr.setdefault(int(run['Color Count']), {
                'best_avg': [9999.9, 9999, ''],
                'best_max': [9999.9, 9999, '']
            })

            ig = run['Initial Guess']
            at = float(run['Average Turns'])
            mt = int(run['Max Turns'])

            if at < gr['best_avg'][0] or (at == gr['best_avg'][0]
                                          and mt < gr['best_avg'][1]):
                gr['best_avg'][0] = at
                gr['best_avg'][1] = mt
                gr['best_avg'][2] = ig

            if mt < gr['best_max'][1] or (mt == gr['best_max'][1]
                                          and at < gr['best_max'][0]):
                gr['best_max'][0] = at
                gr['best_max'][1] = mt
                gr['best_max'][2] = ig


def generate_cxx(filename, results):
    with open(filename, 'w') as f:
        f.write(
            '// Copyright (c) Michael M. Magruder (https://github.com/mikemag)\n'
        )
        f.write('//\n')
        f.write(
            '// This source code is licensed under the MIT license found in the\n'
        )
        f.write('// LICENSE file in the root directory of this source tree.\n')
        f.write('\n')
        f.write('#pragma once\n')
        f.write('\n')
        f.write(
            '//**********************************************************************\n'
        )
        f.write('// DO NOT EDIT!!\n')
        f.write(
            '// This file generated by the Python program in docs/initial_guesses/ig.\n'
        )
        f.write(
            '//**********************************************************************\n'
        )
        f.write('\n')

        for a, pd in results.items():
            f.write('template <uint8_t p, uint8_t c>\n')
            f.write('constexpr uint32_t presetInitialGuess%s() {\n' %
                    a.replace(' ', ''))
            f.write('  switch ((p << 4u) | c) {\n')

            igs = OrderedDict()

            for p, cd in pd.items():
                for c, gd in cd.items():
                    gd = cd[c]
                    ba = gd['best_avg']
                    igl = igs.setdefault(ba[2], [])
                    igl.append('0x%d%x' % (p, c))

            for ig, igd in igs.items():
                for v in igd:
                    f.write('    case ' + v + ':\n')
                f.write('      return 0x' + ig + ';\n')

            f.write('    default:\n')
            f.write(
                '      return (Codeword<p, c>::ONE_PINS >> p / 2 * 4) + Codeword<p, c>::ONE_PINS;\n'
            )
            f.write('  }\n')
            f.write('}\n')


def process_results():
    results = OrderedDict()
    result_files = glob.glob('../*.json')

    for f in result_files:
        load_json(f, results)

    for a, pd in results.items():
        print('### ' + a)
        print()
        print('', ' ', *[str(c) + 'c' for c in range(2, 16)], '', sep='|')
        print('|:---:' * 15, '|', sep='')

        for p in range(2, 9):
            print('|' + str(p) + 'p', end='')
            if p in pd:
                cd = pd[p]
                for c in range(2, 16):
                    if c in cd:
                        gd = cd[c]
                        ba = gd['best_avg']
                        bm = gd['best_max']

                        if ba[1] != bm[1]:
                            # print('|%s (%d), %s (%d)' %
                            #       (ba[2], ba[1], bm[2], bm[1]),
                            #       end='')
                            print('|' + ba[2] + '*', end='')
                        else:
                            print('|' + ba[2], end='')
            print('|')
        print()

    generate_cxx('../../../preset_initial_guesses.h', results)


if __name__ == '__main__':
    process_results()
