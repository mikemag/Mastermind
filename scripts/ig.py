# Copyright (c) Michael M. Magruder (https://github.com/mikemag)
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

import glob
import json
import os
from collections import OrderedDict

from sortedcontainers import SortedDict


def load_json(filename, results):
    with open(os.path.join(filename), "r") as f:
        r = json.load(f)
        runs = [x["run"] for x in r if "run" in x]

        for run in runs:
            ar = results.setdefault(run["Strategy"], SortedDict())
            pr = ar.setdefault(int(run["Pin Count"]), SortedDict())
            gr = pr.setdefault(
                int(run["Color Count"]),
                {
                    "best_avg": {
                        "avg_turns": 9999.9,
                        "max_turns": 9999,
                        "initial_guess": "",
                    },
                    "best_max": {
                        "avg_turns": 9999.9,
                        "max_turns": 9999,
                        "initial_guess": "",
                    },
                },
            )

            ig = run["Initial Guess"]
            at = float(run["Average Turns"])
            mt = int(run["Max Turns"])

            if at < gr["best_avg"]["avg_turns"] or (
                at == gr["best_avg"]["avg_turns"] and mt < gr["best_avg"]["max_turns"]
            ):
                gr["best_avg"]["avg_turns"] = at
                gr["best_avg"]["max_turns"] = mt
                gr["best_avg"]["initial_guess"] = ig

            if mt < gr["best_max"]["max_turns"] or (
                mt == gr["best_max"]["max_turns"] and at < gr["best_max"]["avg_turns"]
            ):
                gr["best_max"]["avg_turns"] = at
                gr["best_max"]["max_turns"] = mt
                gr["best_max"]["initial_guess"] = ig


def generate_md(filename, results_md):
    with open(filename, "r") as f:
        lines = f.readlines()

    with open(filename, "w") as f:
        i = 0
        while not lines[i].startswith("### Knuth"):
            f.write(lines[i])
            i += 1

        for l in results_md:
            f.write(l)
            f.write("\n")

        while not lines[i].startswith("## Unique"):
            i += 1

        for l in lines[i:]:
            f.write(l)


def generate_cxx(filename, results):
    with open(filename, "w") as f:
        f.write("// Copyright (c) Michael M. Magruder (https://github.com/mikemag)\n")
        f.write("//\n")
        f.write("// This source code is licensed under the MIT license found in the\n")
        f.write("// LICENSE file in the root directory of this source tree.\n")
        f.write("\n")
        f.write("#pragma once\n")
        f.write("\n")
        f.write(
            "//**********************************************************************\n"
        )
        f.write("// DO NOT EDIT!!\n")
        f.write("// This file generated by the Python program in scripts.\n")
        f.write(
            "//**********************************************************************\n"
        )
        f.write("\n")

        for a, pd in results.items():
            f.write("template <uint8_t p, uint8_t c>\n")
            f.write(
                "constexpr uint32_t presetInitialGuess%s() {\n" % a.replace(" ", "")
            )
            f.write("  switch ((p << 4u) | c) {\n")

            igs = OrderedDict()

            for p, cd in pd.items():
                for c, gd in cd.items():
                    gd = cd[c]
                    bm = gd["best_max"]
                    igl = igs.setdefault(bm["initial_guess"], [])
                    igl.append("0x%d%x" % (p, c))

            for ig, igd in igs.items():
                for v in igd:
                    f.write("    case " + v + ":\n")
                f.write("      return 0x" + ig + ";\n")

            f.write("    default:\n")
            f.write(
                "      return (Codeword<p, c>::ONE_PINS >> p / 2 * 4) + Codeword<p, c>::ONE_PINS;\n"
            )
            f.write("  }\n")
            f.write("}\n")


def generate_json(filename, results):
    with open(filename, "w") as f:
        json.dump(results, f, indent=2)


def process_results():
    results = OrderedDict()
    result_files = glob.glob("../results/**/*_ig_*.json", recursive=True)

    for f in result_files:
        print(f)
        load_json(f, results)

    results_md = []
    for a, pd in results.items():
        results_md.append("### " + a)
        results_md.append("")
        results_md.append(
            "|".join(["", " ", *[str(c) + "c" for c in range(2, 16)], ""])
        )
        results_md.append("".join(["|:---:" * 15, "|"]))

        for p in range(2, 9):
            l = "|" + str(p) + "p"
            if p in pd:
                cd = pd[p]
                for c in range(2, 16):
                    if c in cd:
                        gd = cd[c]
                        ba = gd["best_avg"]
                        bm = gd["best_max"]

                        if ba["max_turns"] != bm["max_turns"]:
                            l += "|" + bm["initial_guess"] + "*"
                        else:
                            l += "|" + bm["initial_guess"]
            l += "|"
            results_md.append(l)
        results_md.append("")

    generate_md("../docs/Initial_Guesses.md", results_md)
    generate_cxx("../preset_initial_guesses.h", results)
    generate_json("../docs/preset_initial_guesses.json", results)


if __name__ == "__main__":
    process_results()
