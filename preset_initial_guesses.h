// Copyright (c) Michael M. Magruder (https://github.com/mikemag)
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

#pragma once

//********************************************************************
// DO NOT EDIT!!
// This file generated by the Python program in docs/initial_guesses.
//********************************************************************

template <uint8_t p, uint8_t c>
constexpr uint32_t presetInitialGuessFirstOne() {
  switch ((p << 4u) | c) {
    case 0x52:
      return 0x22211;
    case 0x53:
      return 0x33221;
    case 0x54:
      return 0x44332;
    case 0x55:
      return 0x55443;
    case 0x56:
      return 0x66554;
    case 0x57:
      return 0x76543;
    case 0x58:
      return 0x87654;
    case 0x59:
      return 0x98765;
    case 0x5a:
      return 0xa9876;
    case 0x5b:
      return 0xba987;
    case 0x5c:
      return 0xcba98;
    case 0x5d:
      return 0xdcba9;
    case 0x5e:
      return 0xedcba;
    case 0x5f:
      return 0xfedcb;
    case 0x42:
      return 0x2211;
    case 0x43:
      return 0x3321;
    case 0x44:
      return 0x4432;
    case 0x45:
      return 0x5543;
    case 0x46:
      return 0x6543;
    case 0x47:
      return 0x7654;
    case 0x48:
      return 0x8765;
    case 0x49:
      return 0x9876;
    case 0x4a:
      return 0xa987;
    case 0x4b:
      return 0xba98;
    case 0x4c:
      return 0xcba9;
    case 0x4d:
      return 0xdcba;
    case 0x4e:
      return 0xedcb;
    case 0x4f:
      return 0xfedc;
    case 0x72:
      return 0x2222111;
    case 0x73:
      return 0x3332221;
    case 0x74:
      return 0x4433221;
    case 0x75:
      return 0x5544332;
    case 0x76:
      return 0x6655443;
    case 0x77:
      return 0x7766554;
    case 0x78:
      return 0x8877654;
    case 0x22:
      return 0x21;
    case 0x23:
      return 0x32;
    case 0x24:
      return 0x43;
    case 0x25:
      return 0x54;
    case 0x26:
      return 0x65;
    case 0x27:
      return 0x76;
    case 0x28:
      return 0x87;
    case 0x29:
      return 0x98;
    case 0x2a:
      return 0xa9;
    case 0x2b:
      return 0xba;
    case 0x2c:
      return 0xcb;
    case 0x2d:
      return 0xdc;
    case 0x2e:
      return 0xed;
    case 0x2f:
      return 0xfe;
    case 0x82:
      return 0x22222111;
    case 0x83:
      return 0x33332221;
    case 0x84:
      return 0x44433321;
    case 0x85:
      return 0x55544332;
    case 0x86:
      return 0x66554433;
    case 0x32:
      return 0x221;
    case 0x33:
      return 0x332;
    case 0x34:
      return 0x432;
    case 0x35:
      return 0x543;
    case 0x36:
      return 0x654;
    case 0x37:
      return 0x765;
    case 0x38:
      return 0x876;
    case 0x39:
      return 0x987;
    case 0x3a:
      return 0xa98;
    case 0x3b:
      return 0xba9;
    case 0x3c:
      return 0xcba;
    case 0x3d:
      return 0xdcb;
    case 0x3e:
      return 0xedc;
    case 0x3f:
      return 0xfed;
    case 0x62:
      return 0x222111;
    case 0x63:
      return 0x332211;
    case 0x64:
      return 0x443322;
    case 0x65:
      return 0x554432;
    case 0x66:
      return 0x665543;
    case 0x67:
      return 0x776654;
    case 0x68:
      return 0x887654;
    case 0x69:
      return 0x987654;
    case 0x6a:
      return 0xa98765;
    case 0x6b:
      return 0xba9876;
    case 0x6c:
      return 0xcba987;
    default:
      return (Codeword<p, c>::ONE_PINS >> p / 2 * 4) + Codeword<p, c>::ONE_PINS;
  }
}
template <uint8_t p, uint8_t c>
constexpr uint32_t presetInitialGuessKnuth() {
  switch ((p << 4u) | c) {
    case 0x22:
      return 0x11;
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2a:
    case 0x2b:
    case 0x2c:
    case 0x2d:
    case 0x2e:
    case 0x2f:
      return 0x12;
    case 0x42:
      return 0x1112;
    case 0x43:
    case 0x44:
    case 0x45:
      return 0x1123;
    case 0x46:
      return 0x1122;
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4a:
    case 0x4b:
    case 0x4c:
    case 0x4d:
    case 0x4e:
    case 0x4f:
      return 0x1234;
    case 0x82:
      return 0x11111222;
    case 0x83:
      return 0x11122233;
    case 0x84:
      return 0x11122334;
    case 0x62:
      return 0x111222;
    case 0x63:
      return 0x111223;
    case 0x64:
    case 0x65:
      return 0x112233;
    case 0x66:
      return 0x111234;
    case 0x67:
    case 0x68:
      return 0x112234;
    case 0x72:
      return 0x1111222;
    case 0x73:
    case 0x74:
      return 0x1112233;
    case 0x75:
      return 0x1112234;
    case 0x76:
      return 0x1122334;
    case 0x52:
    case 0x53:
      return 0x11122;
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      return 0x11223;
    case 0x59:
      return 0x11234;
    case 0x5a:
    case 0x5b:
    case 0x5c:
      return 0x12345;
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
      return 0x112;
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3a:
    case 0x3b:
    case 0x3c:
    case 0x3d:
    case 0x3e:
    case 0x3f:
      return 0x123;
    default:
      return (Codeword<p, c>::ONE_PINS >> p / 2 * 4) + Codeword<p, c>::ONE_PINS;
  }
}
template <uint8_t p, uint8_t c>
constexpr uint32_t presetInitialGuessMostParts() {
  switch ((p << 4u) | c) {
    case 0x22:
      return 0x11;
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2a:
    case 0x2b:
    case 0x2c:
    case 0x2d:
    case 0x2e:
    case 0x2f:
      return 0x12;
    case 0x42:
      return 0x1112;
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
      return 0x1123;
    case 0x48:
    case 0x49:
    case 0x4a:
    case 0x4b:
    case 0x4c:
    case 0x4d:
    case 0x4e:
    case 0x4f:
      return 0x1234;
    case 0x82:
      return 0x11112222;
    case 0x83:
      return 0x11112223;
    case 0x84:
      return 0x11122233;
    case 0x62:
      return 0x111122;
    case 0x63:
    case 0x64:
    case 0x65:
      return 0x111223;
    case 0x66:
    case 0x67:
    case 0x68:
      return 0x112233;
    case 0x72:
      return 0x1111222;
    case 0x73:
      return 0x1111223;
    case 0x74:
      return 0x1112223;
    case 0x75:
    case 0x76:
      return 0x1112233;
    case 0x52:
      return 0x11122;
    case 0x53:
      return 0x11123;
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      return 0x11223;
    case 0x59:
    case 0x5a:
    case 0x5b:
    case 0x5c:
      return 0x11234;
    case 0x32:
    case 0x33:
    case 0x34:
      return 0x112;
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3a:
    case 0x3b:
    case 0x3c:
    case 0x3d:
    case 0x3e:
    case 0x3f:
      return 0x123;
    default:
      return (Codeword<p, c>::ONE_PINS >> p / 2 * 4) + Codeword<p, c>::ONE_PINS;
  }
}
template <uint8_t p, uint8_t c>
constexpr uint32_t presetInitialGuessEntropy() {
  switch ((p << 4u) | c) {
    case 0x22:
      return 0x11;
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2a:
    case 0x2b:
    case 0x2c:
    case 0x2d:
    case 0x2e:
    case 0x2f:
      return 0x12;
    case 0x42:
      return 0x1112;
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
      return 0x1123;
    case 0x48:
    case 0x49:
    case 0x4a:
    case 0x4b:
    case 0x4c:
    case 0x4d:
    case 0x4e:
    case 0x4f:
      return 0x1234;
    case 0x82:
      return 0x11111222;
    case 0x83:
      return 0x11122233;
    case 0x84:
      return 0x11112234;
    case 0x62:
      return 0x111122;
    case 0x63:
    case 0x64:
    case 0x66:
      return 0x111223;
    case 0x65:
    case 0x68:
      return 0x112233;
    case 0x67:
      return 0x112234;
    case 0x72:
      return 0x1111222;
    case 0x73:
      return 0x1112223;
    case 0x74:
    case 0x75:
    case 0x76:
      return 0x1112233;
    case 0x52:
      return 0x11122;
    case 0x53:
      return 0x11123;
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      return 0x11223;
    case 0x59:
    case 0x5a:
    case 0x5b:
    case 0x5c:
      return 0x11234;
    case 0x32:
    case 0x33:
    case 0x34:
      return 0x112;
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3a:
    case 0x3b:
    case 0x3c:
    case 0x3d:
    case 0x3e:
    case 0x3f:
      return 0x123;
    default:
      return (Codeword<p, c>::ONE_PINS >> p / 2 * 4) + Codeword<p, c>::ONE_PINS;
  }
}
template <uint8_t p, uint8_t c>
constexpr uint32_t presetInitialGuessExpectedSize() {
  switch ((p << 4u) | c) {
    case 0x22:
      return 0x11;
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2a:
    case 0x2b:
    case 0x2c:
    case 0x2d:
    case 0x2e:
    case 0x2f:
      return 0x12;
    case 0x42:
      return 0x1112;
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
      return 0x1123;
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4a:
    case 0x4b:
    case 0x4c:
    case 0x4d:
    case 0x4e:
    case 0x4f:
      return 0x1234;
    case 0x82:
      return 0x11111222;
    case 0x83:
      return 0x11112223;
    case 0x84:
      return 0x11122233;
    case 0x62:
      return 0x111122;
    case 0x63:
      return 0x111223;
    case 0x64:
      return 0x111234;
    case 0x65:
    case 0x66:
      return 0x112233;
    case 0x67:
    case 0x68:
      return 0x112234;
    case 0x72:
      return 0x1111222;
    case 0x73:
      return 0x1112223;
    case 0x74:
    case 0x75:
    case 0x76:
      return 0x1112233;
    case 0x52:
      return 0x11122;
    case 0x53:
      return 0x11123;
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x5b:
      return 0x11223;
    case 0x59:
    case 0x5a:
    case 0x5c:
      return 0x11234;
    case 0x32:
    case 0x33:
    case 0x34:
      return 0x112;
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3a:
    case 0x3b:
    case 0x3c:
    case 0x3d:
    case 0x3e:
    case 0x3f:
      return 0x123;
    default:
      return (Codeword<p, c>::ONE_PINS >> p / 2 * 4) + Codeword<p, c>::ONE_PINS;
  }
}
